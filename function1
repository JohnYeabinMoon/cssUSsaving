## Define CRRA function##############
def CRRA(scriptc,rho):
    if rho == 1:
        u = log(scriptc); 
    else: 
        u = (scriptc**(1-rho))/(1-rho); 
    return u
#####################################

## Define vUPF function ############
def vUPF(scriptm,rho,kappa,littleV,bigR,mybeta):
	temp = CRRA(kappa * scriptm,rho) * littleV
	if rho ==1:
		temp = temp + log(bigR * mybeta) * (mybeta/((mybeta-1)**2));
	return temp
#####################################

def naturalFuncLim0(kEt,Beth,scriptR,mho,kappa,rho):
	return Beth * scriptR * mho * (kappa * scriptR * ((1-kEt)/kEt))**(-rho-1) * kappa;

def kappaLim0Find(Beth,scriptR,mho,kappa,rho,Lambda):
	gothisdeep = 100;
	counter = 0;
	searchAt = 0.5;
	found = 0;
	
	while counter <= (gothisdeep and found == 0):
		if searchAt < naturalFuncLim0(searchAt,Beth,scriptR,mho,kappa,rho)/(1 + naturalFuncLim0(searchAt,Beth,scriptR,mho,kappa,rho)):
			searchAt = searchAt - 2**(-counter)*(Lambda-0.5);
   		if searchAt > naturalFuncLim0(searchAt,Beth,scriptR,mho,kappa,rho)/(1 + naturalFuncLim0(searchAt,Beth,scriptR,mho,kappa,rho)):
   			searchAt = searchAt + 2**(-counter)*(Lambda-0.5);
   		if searchAt == naturalFuncLim0(searchAt,Beth,scriptR,mho,kappa,rho)/(1 + naturalFuncLim0(searchAt,Beth,scriptR,mho,kappa,rho)):
   			found = 1;
   		counter += 1;
   	return searchAt

def CRRAp(scriptc,rho):
	return scriptc**(-rho);

def CRRApp(scriptc,rho):
	return -rho * scriptc**(-rho-1);
	
def CRRAppp(scriptc,rho):
	return -rho * (-rho-1) * scriptc**(-rho-2)
	
def CRRApppp(scriptc,rho):
	return -rho * (-rho-1) * (-rho-2) * scriptc**(-rho-3)

def CRRAppppp(scriptc,rho):
	return -rho * (-rho-1) * (-rho-2) * (-rho-3) * scriptc**(-rho-4)
	
def kappaEFind(rho,mho,kappa,scriptR,Beth,scriptcE,scriptcU):
    gothisdeep = 100; 
    counter = 0;
    searchAt = 0;
    found = 0;
    while counter <= (gothisdeep and found == 0):
        scriptcEP = searchAt;
        LHS = scriptcEP * CRRApp(scriptcE,rho);
        RHS = Beth * ((1 - mho) * (1 - scriptcEP)* scriptcEP * scriptR * CRRApp(scriptcE,rho) + kappa * mho * (1 - scriptcEP)* scriptR * CRRApp(scriptcU,rho));
        if LHS > RHS:
            searchAt = searchAt + 2**(-counter);
        if LHS < RHS:
            searchAt = searchAt - 2**(-counter);
        if LHS == RHS:
            found = 1;
        counter += 1;
    return scriptcEP

def kappaEPFind(kappaE,kappa,rho,mho,Beth,scriptR,scriptcE,scriptcU):
	gothisdeep = 100; 
	counter = 0;
	searchAt = 0;
	found = 0;
	scriptcEP = kappaE;
	while counter <= (gothisdeep and found == 0):
		scriptcEPP = searchAt;
    	LHS = scriptcEPP * CRRApp(scriptcE,rho) + scriptcEP**2 * CRRAppp(scriptcE,rho);
	    RHS = Beth * (-(1 - mho) * scriptcEP * scriptcEPP * scriptR * CRRApp(scriptcE,rho) + (1 - mho) * (1 - scriptcEP)**2 * scriptcEPP * scriptR**2 * CRRApp(scriptcE,rho) - kappa * mho * scriptcEPP * scriptR * CRRApp(scriptcU,rho) + (1 - mho) * (1 - scriptcEP)**2 * scriptcEP**2 * scriptR**2 * CRRAppp(scriptcE,rho) + kappa**2 * mho * (1 - scriptcEP)**2 * scriptR**2 * CRRAppp(scriptcU,rho));
    	
    	
    	if LHS > RHS:
	        searchAt = searchAt + 2**(-counter);
		if LHS < RHS:
	        searchAt = searchAt - 2**(-counter);
    	if LHS == RHS:
	        found = 1;
    	counter += 1;
	return scriptcEPP

def kappaEPPFind(rho,mho,scriptR,kappa,kappaE,kappaEP,Beth,scriptcE,scriptcU):
	gothisdeep = 100; 
	counter = 0;
	searchAt = 0;
	found = 0;
	scriptcEP = kappaE;
	scriptcEPP = kappaEP;
	while counter <= (gothisdeep and found == 0):
		scriptcEPPP = searchAt;
		LHS = scriptcEPPP * CRRApp(scriptcE,rho) + 3 * scriptcEP * scriptcEPP * CRRAppp(scriptcE,rho) + scriptcEP**3 * CRRApppp(scriptcE,rho);
    	RHS = Beth * (-(1 - mho) * scriptcEP * scriptcEPPP * scriptR * CRRApp(scriptcE,rho) - 3 * (1 - mho) * (1 - scriptcEP) * scriptcEPP**2 * scriptR**2 * CRRApp(scriptcE,rho) + (1 - mho) * (1 - scriptcEP)**3 * scriptcEPPP * scriptR**3 * CRRApp(scriptcE,rho) - kappa * mho * scriptcEPPP * scriptR * CRRApp(scriptcU,rho) - 3 * (1 - mho) * (1 - scriptcEP) * scriptcEP**2 * scriptcEPP * scriptR**2 * CRRAppp(scriptcE,rho) + 3 * (1 - mho) * (1 - scriptcEP)**3 * scriptcEP * scriptcEPP * scriptR**3 * CRRAppp(scriptcE,rho) - 3 * kappa**2 * mho * (1 - scriptcEP) * scriptcEPP * scriptR**2 * CRRAppp(scriptcU,rho) + (1 - mho) * (1 - scriptcEP)**3 * scriptcEP**3 * scriptR**3 * CRRApppp(scriptcE,rho) + kappa**3 * mho * (1 - scriptcEP)**3 * scriptR**3 * CRRApppp(scriptcU,rho));
    	if LHS > RHS:
	        searchAt = searchAt + 2**(-counter);
	    if LHS < RHS:
	        searchAt = searchAt - 2**(-counter);
	    if LHS == RHS:
	        found = 1;
	    counter += 1;
	return scriptcEPPP;

def kappaEPPPFind(rho,mho,kappa,kappaE,kappaEP,kappaEPP,Beth,scriptR,scriptcE,scriptcU):
	gothisdeep = 100; 
	counter = 0;
	searchAt = 0;
	found = 0;
	scriptcEP = kappaE;
	scriptcEPP = kappaEP;
	scriptcEPPP = kappaEPP;
	while counter <= (gothisdeep and found == 0):
		scriptcEPPPP = searchAt;
	    LHS = scriptcEPPPP * CRRApp(scriptcE,rho) + 3 * scriptcEPP**2 * CRRAppp(scriptcE,rho) + 4 * scriptcEP * scriptcEPPP * CRRAppp(scriptcE,rho) + 6 * scriptcEP**2 * scriptcEPP * CRRApppp(scriptcE,rho) + scriptcEP**4 * CRRAppppp(scriptcE,rho);
    	RHS = Beth * (-(1 - mho) * scriptcEP*  scriptcEPPPP * scriptR * CRRApp(scriptcE,rho) + 3 * (1 - mho) * scriptcEPP**3 * scriptR**2 * CRRApp(scriptcE,rho) - 4 * (1 - mho) * (1 - scriptcEP) * scriptcEPP * scriptcEPPP * scriptR**2 * CRRApp(scriptcE,rho) - 6 * (1 - mho) * (1 - scriptcEP)**2 * scriptcEPP * scriptcEPPP * scriptR**3 * CRRApp(scriptcE,rho) + (1 - mho) * (1 - scriptcEP)**4 * scriptcEPPPP * scriptR**4 * CRRApp(scriptcE,rho) - kappa * mho * scriptcEPPPP * scriptR * CRRApp(scriptcU,rho) + 3 * (1 - mho) * scriptcEP**2 * scriptcEPP**2 * scriptR**2 * CRRAppp(scriptcE,rho) - 4 * (1 - mho) * (1 - scriptcEP) * scriptcEP**2 * scriptcEPPP * scriptR**2 * CRRAppp(scriptcE,rho) - 18 * (1 - mho) * (1 - scriptcEP)**2 * scriptcEP * scriptcEPP**2 * scriptR**3 * CRRAppp(scriptcE,rho) + 3 * (1 - mho) * (1 - scriptcEP)**4 * scriptcEPP**2 * scriptR**4 * CRRAppp(scriptcE,rho) + 4 * (1 - mho) * (1 - scriptcEP)**4 * scriptcEP * scriptcEPPP * scriptR**4 * CRRAppp(scriptcE,rho) + 3 * kappa**2 * mho * scriptcEPP**2 * scriptR**2 * CRRAppp(scriptcU,rho) - 4 * kappa**2 * mho * (1 - scriptcEP) * scriptcEPPP * scriptR**2 * CRRAppp(scriptcU,rho) - 6 * (1 - mho) * (1 - scriptcEP)**2 * scriptcEP**3 * scriptcEPP * scriptR**3 * CRRApppp(scriptcE,rho) + 6 * (1 - mho) * (1 - scriptcEP)**4 * scriptcEP**2 * scriptcEPP * scriptR**4 * CRRApppp(scriptcE,rho) - 6 * kappa**3 * mho * (1 - scriptcEP)**2 * scriptcEPP * scriptR**3 * CRRApppp(scriptcU,rho) + (1 - mho) * (1 - scriptcEP)**4 * scriptcEP**4 * scriptR**4 * CRRAppppp(scriptcE,rho) + kappa**4 * mho * (1 - scriptcEP)**4 * scriptR**4 * CRRAppppp(scriptcU,rho));
    	if LHS > RHS:
	        searchAt = searchAt + 2**(-counter);
        if LHS < RHS:
	        searchAt = searchAt - 2**(-counter);
    	if LHS == RHS:
	        found = 1;
    	counter += 1;
	return scriptcEPPPP;
